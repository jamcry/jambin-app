[{"/Users/jamcry/Documents/projects/jc/jambin/jambin-app/src/index.tsx":"1","/Users/jamcry/Documents/projects/jc/jambin/jambin-app/src/main/Header.tsx":"2","/Users/jamcry/Documents/projects/jc/jambin/jambin-app/src/pages/create/CreatePage.tsx":"3","/Users/jamcry/Documents/projects/jc/jambin/jambin-app/src/pages/view/ViewPage.tsx":"4","/Users/jamcry/Documents/projects/jc/jambin/jambin-app/src/utils/binUtils.ts":"5","/Users/jamcry/Documents/projects/jc/jambin/jambin-app/src/utils/useQuery.tsx":"6","/Users/jamcry/Documents/projects/jc/jambin/jambin-app/src/pages/create/code-editor/CodeEditor.js":"7","/Users/jamcry/Documents/projects/jc/jambin/jambin-app/src/pages/create/code-editor/SettingsModal.js":"8","/Users/jamcry/Documents/projects/jc/jambin/jambin-app/src/pages/create/code-editor/codeEditorConstants.js":"9"},{"size":910,"mtime":1608465004696,"results":"10","hashOfConfig":"11"},{"size":939,"mtime":1608732163553,"results":"12","hashOfConfig":"11"},{"size":5257,"mtime":1608749005893,"results":"13","hashOfConfig":"11"},{"size":4211,"mtime":1608731883840,"results":"14","hashOfConfig":"11"},{"size":187,"mtime":1608730264943,"results":"15","hashOfConfig":"11"},{"size":140,"mtime":1608463902602,"results":"16","hashOfConfig":"11"},{"size":3948,"mtime":1608748782057,"results":"17","hashOfConfig":"11"},{"size":6560,"mtime":1608748749219,"results":"18","hashOfConfig":"11"},{"size":409,"mtime":1608747387134,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1fps93",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/jamcry/Documents/projects/jc/jambin/jambin-app/src/index.tsx",[],["40","41"],"/Users/jamcry/Documents/projects/jc/jambin/jambin-app/src/main/Header.tsx",[],"/Users/jamcry/Documents/projects/jc/jambin/jambin-app/src/pages/create/CreatePage.tsx",["42"],"/Users/jamcry/Documents/projects/jc/jambin/jambin-app/src/pages/view/ViewPage.tsx",["43","44"],"import React, { useState, useEffect } from \"react\";\nimport { useParams, useHistory, useLocation } from \"react-router-dom\";\nimport {\n  Alert,\n  AlertIcon,\n  Box,\n  Button,\n  Divider,\n  FormControl,\n  FormLabel,\n  Heading,\n  Input,\n  Textarea,\n} from \"@chakra-ui/react\";\nimport { LockIcon } from \"@chakra-ui/icons\";\n\nimport useQuery from \"../../utils/useQuery\";\n\nfunction ViewPage() {\n  const { binId: binIdFromParams } = useParams<{ binId?: string }>();\n  const searchQuery = useQuery();\n  const history = useHistory();\n  const location = useLocation();\n  const [binId, setBinId] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [shouldFetch, setShouldFetch] = useState(false);\n  const [isFetching, setIsFetching] = useState(false);\n  const [binData, setBinData] = useState<{\n    error?: string;\n    body?: string;\n  } | null>(null);\n\n  useEffect(() => {\n    // FORMAT: .../view/BIN_ID?password=BIN_PW\n\n    const passwordFromSearchQuery = searchQuery.get(\"password\");\n\n    if (binIdFromParams) {\n      setBinId(binIdFromParams);\n    }\n\n    if (passwordFromSearchQuery) {\n      setPassword(passwordFromSearchQuery);\n    }\n\n    if (binIdFromParams || passwordFromSearchQuery) {\n      setShouldFetch(true);\n    } else {\n      // this occurs when clicked VIEW navlink when on a view page, should reset all details in this case\n      setBinId(\"\");\n      setPassword(\"\");\n      setBinData(null);\n      setShouldFetch(false);\n    }\n  }, [location]);\n\n  useEffect(() => {\n    if (shouldFetch) {\n      setIsFetching(true);\n\n      fetch(\"http://localhost:3452/readbins/\", {\n        method: \"POST\",\n\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n        },\n\n        body: JSON.stringify({\n          id: binId,\n          password: password.length ? password : undefined,\n        }),\n      })\n        .then((res) => res.json())\n        .then((j) => {\n          setBinData(j);\n          setIsFetching(false);\n          setShouldFetch(false);\n        });\n    }\n  }, [shouldFetch]);\n\n  return (\n    <>\n      <Box p={1}>\n        <Box textAlign=\"center\">\n          <Heading size={\"lg\"}>View Bin</Heading>\n        </Box>\n\n        <Box my={4} textAlign=\"left\">\n          <FormControl>\n            <FormLabel>Bin Id</FormLabel>\n\n            <Input\n              placeholder={\"id of the bin\"}\n              value={binId}\n              onChange={(e) => {\n                console.log({ val: e.currentTarget.value });\n                setBinId(e.currentTarget.value);\n              }}\n            />\n          </FormControl>\n\n          <FormControl mt={6}>\n            <FormLabel>Password (optional)</FormLabel>\n\n            <Input\n              title=\"hello\"\n              placeholder={\"password of the bin (if any)\"}\n              type={\"password\"}\n              value={password}\n              onChange={(e) => setPassword(e.currentTarget.value)}\n            />\n          </FormControl>\n\n          <Button\n            width=\"full\"\n            mt={4}\n            isLoading={isFetching}\n            loadingText={\"Fetching\"}\n            colorScheme={\"blue\"}\n            onClick={() => {\n              history.push({\n                pathname: `/view/${binId}`,\n                search: password ? `?password=${password}` : undefined,\n              });\n            }}\n            isDisabled={!binId.length}\n          >\n            Get\n          </Button>\n        </Box>\n      </Box>\n\n      {isFetching && <p>Loading...</p>}\n\n      <Divider mb={5} />\n\n      <Box>\n        {binData?.error &&\n          (binData.error === \"Password is required\" ? (\n            <Alert status=\"warning\" borderRadius={\"lg\"}>\n              <LockIcon />\n              This bin is password protected\n            </Alert>\n          ) : (\n            <Alert status=\"error\" borderRadius={\"lg\"}>\n              <AlertIcon />\n              {binData.error}\n            </Alert>\n          ))}\n\n        {binData?.body && (\n          <>\n            <Heading size={\"small\"} mb={2} textAlign={\"left\"}>\n              Bin Content\n            </Heading>\n\n            <Textarea value={binData.body} onChange={() => null} />\n          </>\n        )}\n      </Box>\n    </>\n  );\n}\n\nexport default ViewPage;\n","/Users/jamcry/Documents/projects/jc/jambin/jambin-app/src/utils/binUtils.ts",[],"/Users/jamcry/Documents/projects/jc/jambin/jambin-app/src/utils/useQuery.tsx",[],"/Users/jamcry/Documents/projects/jc/jambin/jambin-app/src/pages/create/code-editor/CodeEditor.js",[],"/Users/jamcry/Documents/projects/jc/jambin/jambin-app/src/pages/create/code-editor/SettingsModal.js",["45","46"],"/Users/jamcry/Documents/projects/jc/jambin/jambin-app/src/pages/create/code-editor/codeEditorConstants.js",[],{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","severity":1,"message":"52","line":60,"column":6,"nodeType":"53","endLine":60,"endColumn":19,"suggestions":"54"},{"ruleId":"51","severity":1,"message":"55","line":55,"column":6,"nodeType":"53","endLine":55,"endColumn":16,"suggestions":"56"},{"ruleId":"51","severity":1,"message":"57","line":81,"column":6,"nodeType":"53","endLine":81,"endColumn":19,"suggestions":"58"},{"ruleId":"59","severity":1,"message":"60","line":5,"column":3,"nodeType":"61","messageId":"62","endLine":5,"endColumn":8},{"ruleId":"59","severity":1,"message":"63","line":19,"column":3,"nodeType":"61","messageId":"62","endLine":19,"endColumn":10},"no-native-reassign",["64"],"no-negated-in-lhs",["65"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'body' and 'password'. Either include them or remove the dependency array.","ArrayExpression",["66"],"React Hook useEffect has missing dependencies: 'binIdFromParams' and 'searchQuery'. Either include them or remove the dependency array.",["67"],"React Hook useEffect has missing dependencies: 'binId' and 'password'. Either include them or remove the dependency array.",["68"],"no-unused-vars","'Label' is defined but never used.","Identifier","unusedVar","'Heading' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"69","fix":"70"},{"desc":"71","fix":"72"},{"desc":"73","fix":"74"},"Update the dependencies array to be: [body, password, shouldFetch]",{"range":"75","text":"76"},"Update the dependencies array to be: [binIdFromParams, location, searchQuery]",{"range":"77","text":"78"},"Update the dependencies array to be: [binId, password, shouldFetch]",{"range":"79","text":"80"},[1467,1480],"[body, password, shouldFetch]",[1452,1462],"[binIdFromParams, location, searchQuery]",[2030,2043],"[binId, password, shouldFetch]"]